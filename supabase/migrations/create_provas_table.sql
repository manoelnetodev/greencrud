/*
  # Create enums and provas table
  1. New Types: UF (enum), tipo_de_foco (enum)
  2. New Tables: provas (id integer, ano integer, banca_id integer, instituicao integer, nome text, qtd_questoes integer, uf UF, tipo_de_foco tipo_de_foco, id_qs bigint[], bloqueada boolean)
  3. Foreign Keys: provas.instituicao references instituicoes.id
  4. Security: Enable RLS for provas, add read/insert/update policies for authenticated users.
*/

-- Create UF enum type
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'uf') THEN
        CREATE TYPE public.uf AS ENUM (
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO', 'BRASIL'
        );
    END IF;
END $$;

-- Create tipo_de_foco enum type
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'tipo_de_foco') THEN
        CREATE TYPE public.tipo_de_foco AS ENUM (
            'Concurso', 'Vestibular', 'OAB', 'ENEM', 'Outros'
        );
    END IF;
END $$;

-- Create provas table
CREATE TABLE IF NOT EXISTS public.provas (
  id integer generated by default as identity not null,
  created_at timestamp without time zone null default now(),
  ano integer null,
  banca_id integer null,
  instituicao integer null, -- Changed from bigint to integer to match instituicoes.id
  nome text null,
  qtd_questoes integer null,
  uf public.uf null,
  tipo_de_foco public.tipo_de_foco null,
  id_qs bigint[] null,
  bloqueada boolean null default false, -- Added default value
  constraint prova_pkey primary key (id),
  constraint provas_id_key unique (id),
  constraint provas_instituicao_fkey foreign KEY (instituicao) references public.instituicoes (id) ON DELETE CASCADE -- Added ON DELETE CASCADE for referential integrity
) TABLESPACE pg_default;

-- Enable Row Level Security for provas
ALTER TABLE public.provas ENABLE ROW LEVEL SECURITY;

-- Policies for provas table
-- Allow authenticated users to read provas
CREATE POLICY "Authenticated users can view provas"
ON public.provas FOR SELECT TO authenticated
USING (true);

-- Allow authenticated users to insert provas
CREATE POLICY "Authenticated users can insert provas"
ON public.provas FOR INSERT TO authenticated
WITH CHECK (true);

-- Allow authenticated users to update provas
CREATE POLICY "Authenticated users can update provas"
ON public.provas FOR UPDATE TO authenticated
USING (true) WITH CHECK (true);

-- Forbid authenticated users from deleting provas (for data integrity)
CREATE POLICY "Authenticated users cannot delete provas"
ON public.provas FOR DELETE TO authenticated
USING (false);
