/*
  # Create instituicoes table and UF enum
  1. New Types: UF (enum for Brazilian states)
  2. New Tables: instituicoes (id bigint, created_at timestamptz, nome text, nome_g text, uf public.UF, desabilitada boolean)
  3. Security: Enable RLS for instituicoes, add read policy for authenticated users
*/

-- Create UF enum type if it does not exist
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'uf') THEN
        CREATE TYPE public.UF AS ENUM (
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'
        );
    END IF;
END
$$;

-- Create instituicoes table if it does not exist
CREATE TABLE IF NOT EXISTS public.instituicoes (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  nome text NULL,
  nome_g text NULL,
  uf public.UF NULL,
  desabilitada boolean NULL DEFAULT FALSE, -- Adicionado DEFAULT FALSE para desabilitada
  CONSTRAINT instituicoes_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- Enable Row Level Security for instituicoes table
ALTER TABLE public.instituicoes ENABLE ROW LEVEL SECURITY;

-- Create policy to allow authenticated users to view instituicoes
CREATE POLICY "Allow authenticated users to view instituicoes"
ON public.instituicoes FOR SELECT TO authenticated
USING (true);

-- Optional: Policy for inserting new institutions (example, adjust as needed)
-- CREATE POLICY "Allow authenticated users to insert instituicoes"
-- ON public.instituicoes FOR INSERT TO authenticated
-- WITH CHECK (true);

-- Optional: Policy for updating institutions (example, adjust as needed)
-- CREATE POLICY "Allow authenticated users to update instituicoes"
-- ON public.instituicoes FOR UPDATE TO authenticated
-- USING (true) WITH CHECK (true);

-- Optional: Policy for deleting institutions (example, adjust as needed)
-- CREATE POLICY "Allow authenticated users to delete instituicoes"
-- ON public.instituicoes FOR DELETE TO authenticated
-- USING (true);
